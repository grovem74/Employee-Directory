{"version":3,"sources":["components/List.js","components/FilterSelect.js","components/FilteredList.js","components/SortBtn.js","components/FilterBtn.js","App.js","serviceWorker.js","index.js"],"names":["List","props","className","employees","map","employee","key","id","firstName","lastName","title","department","salary","FilterSelect","classname","onChange","event","setState","value","target","filter","filterChoice","SortBtn","onClick","alert","data","console","log","sort","FilterBtn","FilterChoice","App","FilteredList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAiCeA,MA9Bf,SAAcC,GACZ,OACE,yBAAKC,UAAU,aAAf,YAEE,+BACE,+BACE,4BACE,0CACA,yCACA,qCACA,0CACA,uCAEDD,EAAME,UAAUC,KAAI,SAAAC,GAAQ,OAE3B,wBAAIC,IAAKD,EAASE,IAChB,4BAAMF,EAASG,WACf,4BAAMH,EAASI,UACf,4BAAMJ,EAASK,OACf,4BAAML,EAASM,YACf,4BAAMN,EAASO,gBCDdC,MAnBR,WAAyB,IAAD,OAG7B,OACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKY,UAAU,eACb,4BAAQZ,UAAU,kBAAkBK,GAAG,SAASQ,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,UAEvG,4BAAQA,MAAM,YAAd,aACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,cAAd,mBCoBGlB,MA9Bf,SAAcC,GACZ,OACE,yBAAKC,UAAU,aAAf,oBAEE,+BACE,+BACE,4BACE,0CACA,yCACA,qCACA,0CACA,uCAEDD,EAAME,UAAUiB,QAAO,SAAAf,GAAQ,OAAIA,EAASM,aAAe,CAACU,mBAAejB,KAAI,SAAAC,GAAQ,OAEtF,wBAAIC,IAAKD,EAASE,IAChB,4BAAMF,EAASG,WACf,4BAAMH,EAASI,UACf,4BAAMJ,EAASK,OACf,4BAAML,EAASM,YACf,4BAAMN,EAASO,gBCDdU,MAnBf,SAAiBrB,GACf,OACE,yBAAKC,UAAU,aACb,4BAAQqB,QASZ,WACEC,MAAM,WALeC,EAMPxB,EAAME,UAAU,GAAGM,SAL1BiB,QAAQC,IAAIF,EAAKG,QAD1B,IAAuBH,IALnB,UCcSI,MAjBf,WACE,OACE,yBAAK3B,UAAU,aACb,4BAAQqB,QAIZ,WACEC,MAAM,aAENE,QAAQC,IAAIG,EAAaZ,SAPvB,YCCAf,EAAY,CAChB,CACEI,GAAI,EACJC,UAAW,OACXC,SAAU,SACVC,MAAO,aACPC,WAAY,KACZC,OAAQ,MAEV,CACEL,GAAI,EACJC,UAAW,SACXC,SAAU,SACVC,MAAO,UACPC,WAAY,kBACZC,OAAQ,KAEV,CACEL,GAAI,EACJC,UAAW,QACXC,SAAU,SACVC,MAAO,uBACPC,WAAY,mBACZC,OAAQ,KAEV,CACEL,GAAI,EACJC,UAAW,OACXC,SAAU,QACVC,MAAO,mBACPC,WAAY,qBACZC,OAAQ,QAoBGmB,MAbf,WAEE,OACE,oCACE,kBAAC,EAAD,CAAM5B,UAAWA,IAAa,6BAC9B,kBAAC6B,EAAD,CAAc7B,UAAWA,IAAa,6BACtC,kBAAC,EAAD,CAAcA,UAAWA,IACzB,kBAAC,EAAD,CAAWA,UAAWA,IAAa,6BACnC,kBAAC,EAAD,CAASA,UAAWA,MC1CN8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.cf49cb5e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './List.css';\r\n\r\nfunction List(props) {\r\n  return (\r\n    <div className='container'>\r\n      Employees\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Title</th>\r\n            <th>Department</th>\r\n            <th>Salary</th>\r\n          </tr>\r\n          {props.employees.map(employee => (\r\n\r\n            <tr key={employee.id}>\r\n              <td >{employee.firstName}</td>\r\n              <td >{employee.lastName}</td>\r\n              <td >{employee.title}</td>\r\n              <td >{employee.department}</td>\r\n              <td >{employee.salary}</td>\r\n            </tr>\r\n\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React from \"react\";\r\n\r\nexport let filterChoice = 'IT';\r\nexport function FilterSelect() {\r\n\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='row'>\r\n        <div classname='input-field'>\r\n          <select className=\"browser-default\" id=\"filter\" onChange={(event) => this.setState({ value: event.target.value })}>\r\n            {/* <select id=\"filter\" onChange={filterChange}> */}\r\n            <option value=\"lastName\">Last Name</option>\r\n            <option value=\"title\">Title</option>\r\n            <option value=\"department\">Department</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilterSelect;\r\n\r\n","import React from \"react\";\r\nimport './List.css';\r\nimport filterChoice from './FilterSelect'\r\n\r\nfunction List(props) {\r\n  return (\r\n    <div className='container'>\r\n      FilteredEmployees\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>First Name</th>\r\n            <th>Last Name</th>\r\n            <th>Title</th>\r\n            <th>Department</th>\r\n            <th>Salary</th>\r\n          </tr>\r\n          {props.employees.filter(employee => employee.department === {filterChoice}).map(employee => (\r\n\r\n            <tr key={employee.id}>\r\n              <td >{employee.firstName}</td>\r\n              <td >{employee.lastName}</td>\r\n              <td >{employee.title}</td>\r\n              <td >{employee.department}</td>\r\n              <td >{employee.salary}</td>\r\n            </tr>\r\n\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React from \"react\";\r\n\r\n\r\n\r\nfunction SortBtn(props) {\r\n  return (\r\n    <div className='container'>\r\n      <button onClick={sortData}>SORT</button>\r\n    </div>\r\n\r\n  )\r\n\r\n  function sortEmployees(data) {\r\n    return console.log(data.sort());\r\n  }\r\n\r\n  function sortData() {\r\n    alert('sorting');\r\n    sortEmployees(props.employees[1].lastName)\r\n  }\r\n\r\n}\r\n\r\nexport default SortBtn;\r\n\r\n","import React from \"react\";\nimport FilterSelect from \"./FilterSelect\";\nimport FilterChoice from \"./FilterSelect\";\n\nfunction FilterBtn() {\n  return (\n    <div className='container'>\n      <button onClick={filterData}>FILTER</button> \n    </div>\n  )\n\n  function filterData() {\n    alert('filtering');\n    // filterEmployees()\n    console.log(FilterChoice.value);\n\n\n  }\n\n}\n\nexport default FilterBtn;\n\n","import React from 'react';\nimport './App.css';\nimport List from \"./components/List\";\nimport FilteredList from \"./components/FilteredList\";\nimport SortBtn from \"./components/SortBtn\";\nimport FilterBtn from \"./components/FilterBtn\";\nimport FilterSelect from \"./components/FilterSelect\";\n\nconst employees = [\n  {\n    id: 1,\n    firstName: 'Jill',\n    lastName: 'Powell',\n    title: 'Technician',\n    department: 'IT',\n    salary: 68000\n  },\n  {\n    id: 2,\n    firstName: 'George',\n    lastName: 'Harris',\n    title: 'Manager',\n    department: 'Human Resources',\n    salary: 70000\n  },\n  {\n    id: 3,\n    firstName: 'Susan',\n    lastName: 'Miller',\n    title: 'Customer Service Rep',\n    department: 'Customer Service',\n    salary: 60000\n  },\n  {\n    id: 4,\n    firstName: 'Eric',\n    lastName: 'Davis',\n    title: 'Network Engineer',\n    department: 'Network Operations',\n    salary: 73500\n  }\n]\n\n\n\n\nfunction App() {\n\n  return (\n    <>\n      <List employees={employees} /><br></br>\n      <FilteredList employees={employees} /><br></br>\n      <FilterSelect employees={employees} />\n      <FilterBtn employees={employees} /><br></br>\n      <SortBtn employees={employees} />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}